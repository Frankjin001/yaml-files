# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  Feimao:
    url: "ADD YOUR SUBSCRIPTION HERE"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    header:
      User-Agent:
      - "Clash"
      - "mihomo"
      - "Clash.meta"

  LiuLiangGuang:
    url: "ADD YOUR SECOND SUBSCRIPTION HERE"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    header:
      User-Agent:
      - "Clash"
      - "mihomo"
      - "Clash.meta"

# 节点信息
proxies:
  - {name: 直连, type: direct, udp: true}

# 下面的VLESS节点来自ClawCloud的proxies-7tech POD，创建于20250902，可能会死掉，可以重启POD。重启之后，理论上这里不需要修改任何东西，应该自动连通。
  - { name: "cf_tunnel_visa_tw_443", type: vless, server: www.visa.com.tw, port: 443, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_visa_hk_2053", type: vless, server: www.visa.com.hk, port: 2053, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_visa_br_8443", type: vless, server: www.visa.com.br, port: 8443, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_visa_ch_443", type: vless, server: www.visaeurope.ch, port: 443, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_visa_us_2053", type: vless, server: usa.visa.com, port: 2053, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_icook_hk_8443", type: vless, server: icook.hk, port: 8443, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }
  - { name: "cf_tunnel_icook_tw_443", type: vless, server: icook.tw, port: 443, uuid: <USE THE PRIVATE uuid>, udp: true, tls: true, network: ws, sni: clawcloud.myworldmyway.top, host: clawcloud.myworldmyway.top, ws-opts: { path: "/<USE THE PRIVATE uuid>?ed=2048", headers: { Host: clawcloud.myworldmyway.top } }, client-fingerprint: chrome }


# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
#ipv6: false
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.wechat.com"
    - "+.qpic.cn"
    - "+.qq.com"
    - "+.wechatapp.com"
    - "+.vivox.com"
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:7874
#  ipv6: false
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
  #  - "+.ibm.com"       ###from this line, added by Frank test"
  #  - "test-ipv6.com"
  #  - "+.cloudflare.com"
  #  - "+.hp.com"
  #  - "+.oracle.com"
  #  - "+.google.com"
  #  - "+.youtube.com"
  
  # 用于解析 nameserver，fallback 以及其他 DNS 服务器配置的，DNS 服务域名
  # 只能使用纯 IP 地址，可使用加密 DNS
  default-nameserver:
    - 223.5.5.5
  
  # 专用于节点域名解析的 DNS 服务器，非必要配置项，如果不填则遵循nameserver-policy、nameserver和fallback的配置
  proxy-server-nameserver:
    - https://dns.alidns.com/dns-query
    # - https://1.1.1.1/dns-query        # Cloudflare
    # - https://dns.google/dns-query    # Google DNS

  
  # 配置查询域名使用的 DNS 服务器
  #nameserver-policy:
  #  "rule-set:private_domain,cn_domain":
  #    - 223.5.5.5
  #    - 119.29.29.29
  #  "rule-set:gfw_domain,geolocation-!cn":
      #- tls://8.8.4.4#🚀 默认代理
      #- tls://1.1.1.1#🚀 默认代理
  #     - https://1.1.1.1/dns-query
  #     - https://dns.google/dns-query

  # namesever尽量用运营商提供的DNS
  nameserver:
    - 116.228.111.118
    - 180.168.255.18
    #- 223.5.5.5
    #- 119.29.29.29
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
# pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🇸🇬 狮城故转, 🔯 日本故转, 🇹🇼 台湾故转, ♻️ 香港自动, 🇸🇬 狮城自动, ♻️ 日本自动, 🇹🇼 台湾自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
pr: &pr {type: select, proxies: [🚀 默认代理,  ♻️ 香港自动, 🇸🇬 狮城自动, ♻️ 日本自动, 🇹🇼 台湾自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇺🇲 美国节点, ♻️ LLG香港自动, 🇹🇼 LLG台湾自动, 🇸🇬 LLG狮城自动, 🌐 全部节点, 直连]}

# llg-pr: &llg-pr {type: select, proxies: [♻️ LLG香港自动, 🇹🇼 LLG台湾自动, 🇸🇬 LLG狮城自动, 🚀 默认代理, 直连]}
# llg-pr: &llg-pr {type: select, proxies: [♻️ LLG香港自动, 🇹🇼 LLG台湾自动, 🇸🇬 LLG狮城自动]}

proxy-groups:
#  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🇸🇬 狮城故转, 🔯 日本故转, 🇹🇼 台湾故转, ♻️ 香港自动, 🇸🇬 狮城自动, ♻️ 日本自动, 🇹🇼 台湾自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 香港自动, 🇸🇬 狮城自动, ♻️ 日本自动, 🇹🇼 台湾自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇺🇲 美国节点, ♻️ LLG香港自动, 🇹🇼 LLG台湾自动, 🇸🇬 LLG狮城自动, 🚇 ClawCloud隧道, 🌐 全部节点, 直连]}  
  
 # - {name: 🚀 LLG港台新, <<: *llg-pr}

  - {name: 🎯 香港固定, type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🔯 LLG香港故转]}
  - {name: 📹 YouTube, <<: *pr}
 # - {name: 📹 YouTube, type: select, proxies: [♻️ LLG香港自动, 🇹🇼 LLG台湾自动, 🇸🇬 LLG狮城自动, 🚀 默认代理]}
 # - {name: 📹 YouTube, <<: *llg-pr} 

  - {name: 🚇 ClawCloud隧道, type: select, proxies: [cf_tunnel_visa_tw_443, cf_tunnel_visa_hk_2053, cf_tunnel_visa_br_8443, cf_tunnel_visa_ch_443, cf_tunnel_visa_us_2053, cf_tunnel_icook_hk_8443, cf_tunnel_icook_tw_443]}

  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 tktn, type: select, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ LLG香港自动, ♻️ 美国自动]}
  
  - {name: 🎯 BBC, type: select, proxies: [🚀 默认代理, 🚇 ClawCloud隧道, 🇬🇧 英国自动, ♻️ 美国自动]}

  - {name: 🐟 漏网之鱼, <<: *pr}
 # - {name: 🐟 漏网之鱼, <<: *llg-pr}

  - {name: 🇭🇰 香港节点, type: select, use: [Feimao], filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇹🇼 台湾节点, type: select, use: [Feimao], filter: "(?i)台|tw|taiwan|tai wan"}
 # - {name: 🇸🇬 狮城节点, type: select, use: [Feimao], filter: "(?i)新|狮|sg|Singapore"}
  - {name: 🇸🇬 狮城节点, type: select, use: [Feimao], filter: "(?i)坡|狮|sg|Singapore"}
  - {name: 🇯🇵 日本节点, type: select, use: [Feimao], filter: "(?i)Cl日|jp|japan"}
  - {name: 🇺🇲 美国节点, type: select, use: [Feimao], filter: "(?i)美|us|unitedstates|united states"}
#  - {name: 🇬🇧 英国节点, type: select, use: [Feimao], filter: "(?i)英|uk|unitedkingdom|united kingdom"}

# enable 香港故转 for IPTV gather, expecting to use a proxy server and stick to it as long as it is available. 
  - {name: 🔯 香港故转, type: fallback, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}


#  - {name: 🇹🇼 台湾故转, type: fallback, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(台|TW|(?i)Tai))^((?!(港|日|韩|新|深|美)).)*$"}
#  - {name: 🇸🇬 狮城故转, type: fallback, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(新|狮|SG|(?i)Singapore))^((?!(港|日|韩|台|深|美)).)*$"}
#  - {name: 🔯 日本故转, type: fallback, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }

  - {name: ♻️ 香港自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🇹🇼 台湾自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(台|TW|(?i)Tai))^((?!(港|日|韩|新|深|美)).)*$"}
# - {name: 🇸🇬 狮城自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(新|狮|SG|(?i)Singapore))^((?!(港|日|韩|台|深|美)).)*$"} 
  - {name: 🇸🇬 狮城自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(坡|狮|SG|(?i)Singapore))^((?!(港|日|韩|台|深|美)).)*$"} 

  - {name: ♻️ 日本自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
#  - {name: 🇬🇧 英国自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?=.*(英|UK|(?i)unitedkingdom|united kingdom))^((?!(港|台|日|韩|新|美)).)*$"}
  - {name: 🇬🇧 英国自动, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "(?i)^(?!.*(港|台|日|韩|新|美)).*(英|UK|united ?kingdom)"}


# 此处是LiuLiangGuang机场节点配置
  - {name: ♻️ LLG香港自动, type: url-test, use: [LiuLiangGuang], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🇹🇼 LLG台湾自动, type: url-test, use: [LiuLiangGuang], tolerance: 20, interval: 300, filter: "(?=.*(台|TW|(?i)Tai))^((?!(港|日|韩|新|深|美)).)*$"}
  - {name: 🇸🇬 LLG狮城自动, type: url-test, use: [LiuLiangGuang], tolerance: 20, interval: 300, filter: "(?=.*(新|狮|SG|(?i)Singapore))^((?!(港|日|韩|台|深|美)).)*$"}
  - {name: 🔯 LLG香港故转, type: fallback, use: [LiuLiangGuang], tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  
# 此处将列出两个机场所有的节点
# - {name: ♻️ 自动选择, type: url-test, use: [Feimao], tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
# - {name: 🌐 全部节点, type: select, use: [Feimao]}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}



# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理

# 此规则针对IPTV直播源Gather-json，订阅地址和收看地址一致
  - DOMAIN-KEYWORD,iill,🎯 香港固定
#  - DOMAIN-KEYWORD,iill,直连
# 此规则针对simplex，避免节点自动跳跃引起连接中断
  - DOMAIN-SUFFIX,simplex.im,🎯 香港固定
  - DOMAIN-SUFFIX,pairdrop.net,直连

# disable all my own rules to test, 20250816 
  - RULE-SET,rejectlist-frankjin,REJECT
#  - RULE-SET,directlist-frankjin,直连
  - RULE-SET,tktnlist-frankjin,🎯 tktn

  #- RULE-SET,bbcuklist-frankjin,🇬🇧 英国自动
  #- RULE-SET,bbcuklist-frankjin,🚀 默认代理
  - RULE-SET,bbcuklist-frankjin,🎯 BBC
  #- RULE-SET,2minutes-bbc-frankjin,🎯 BBC

  # - RULE-SET,adultlist,🚀 LLG港台新
  - RULE-SET,adultlist,🚀 默认代理

# disable all my own rules, 20250816 
#  - RULE-SET,proxylite-frankjin,🚀 默认代理

  - RULE-SET,private_domain,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  proxylite-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/ProxyLite.list"}
  rejectlist-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/Reject.list"}
  directlist-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/Direct-fatcat.list"}
  tktnlist-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/tktn.list"}


  # 2minutes-bbc-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/2minutes-bbc.list"}
  bbcuklist-frankjin: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/BBC-UK.list"}
  
  adultlist: { <<: *class, url: "https://raw.githubusercontent.com/Frankjin001/rules/refs/heads/main/Adult.list"}

  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}